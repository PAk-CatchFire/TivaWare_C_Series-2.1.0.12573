<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\cc3000_ssid_scan.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\cc3000_ssid_scan.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Oct 30 16:18:06 2014
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; wlan_ioctl_set_scan_params &rArr; SimpleLinkWaitEvent &rArr; hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[12]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[16]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">SysCtlDelay</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">CC3000_AsyncCallback</a> from cc3000_ssid_scan.o(i.CC3000_AsyncCallback) referenced from cc3000_ssid_scan.o(i.initDriver)
 <LI><a href="#[2]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 111 times from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">IntSpiGPIOHandler</a> from cc3000lib.o(i.IntSpiGPIOHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">ReadWlanInterruptPin</a> from board.o(i.ReadWlanInterruptPin) referenced from cc3000_ssid_scan.o(i.initDriver)
 <LI><a href="#[12]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">SpiIntHandler</a> from cc3000lib.o(i.SpiIntHandler) referenced 2 times from startup_rvmdk.o(RESET)
 <LI><a href="#[11]">SpiReceiveHandler</a> from cc3000lib.o(i.SpiReceiveHandler) referenced from cc3000lib.o(i.wlan_start)
 <LI><a href="#[4]">SysTickHandler</a> from board.o(i.SysTickHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">UARTStdioIntHandler</a> from uartstdio.o(i.UARTStdioIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">WlanInterruptDisable</a> from board.o(i.WlanInterruptDisable) referenced from cc3000_ssid_scan.o(i.initDriver)
 <LI><a href="#[b]">WlanInterruptEnable</a> from board.o(i.WlanInterruptEnable) referenced from cc3000_ssid_scan.o(i.initDriver)
 <LI><a href="#[9]">WriteWlanPin</a> from board.o(i.WriteWlanPin) referenced from cc3000_ssid_scan.o(i.initDriver)
 <LI><a href="#[8]">main</a> from cc3000_ssid_scan.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[d]">sendBootLoaderPatch</a> from cc3000_ssid_scan.o(i.sendBootLoaderPatch) referenced from cc3000_ssid_scan.o(i.initDriver)
 <LI><a href="#[e]">sendDriverPatch</a> from cc3000_ssid_scan.o(i.sendDriverPatch) referenced from cc3000_ssid_scan.o(i.initDriver)
 <LI><a href="#[f]">sendWLFWPatch</a> from cc3000_ssid_scan.o(i.sendWLFWPatch) referenced from cc3000_ssid_scan.o(i.initDriver)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[13]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[62]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[14]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[63]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[64]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[65]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[66]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[67]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[68]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[69]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[6a]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[5b]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[6c]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[16]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFirstWrite
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_patch_send
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_handler
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>CC3000_AsyncCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cc3000_ssid_scan.o(i.CC3000_AsyncCallback))
<BR>[Address Reference Count : 1]<UL><LI> cc3000_ssid_scan.o(i.initDriver)
</UL>
<P><STRONG><a name="[5c]"></a>FPUEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPUEnable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
</UL>

<P><STRONG><a name="[5d]"></a>FPULazyStackingEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPULazyStackingEnable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
</UL>

<P><STRONG><a name="[19]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
</UL>

<P><STRONG><a name="[3f]"></a>GPIOIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanInterruptDisable
</UL>

<P><STRONG><a name="[40]"></a>GPIOIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlanInterruptEnable
</UL>

<P><STRONG><a name="[5e]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
</UL>

<P><STRONG><a name="[1a]"></a>GPIOPadConfigSet</STRONG> (Thumb, 314 bytes, Stack size 28 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
</UL>

<P><STRONG><a name="[29]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiConfigure
</UL>

<P><STRONG><a name="[25]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWlanInterruptPin
</UL>

<P><STRONG><a name="[18]"></a>GPIOPinTypeEthernetLED</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeEthernetLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeEthernetLED &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
</UL>

<P><STRONG><a name="[1b]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
</UL>

<P><STRONG><a name="[1c]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDs
</UL>

<P><STRONG><a name="[41]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDs
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWlanPin
</UL>

<P><STRONG><a name="[1d]"></a>InitSysTick</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board.o(i.InitSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>

<P><STRONG><a name="[5f]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
</UL>

<P><STRONG><a name="[7]"></a>IntSpiGPIOHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cc3000lib.o(i.IntSpiGPIOHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IntSpiGPIOHandler &rArr; SpiReadData &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteAsync
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadData
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiCleanGPIOISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PinoutSet</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, pinout.o(i.PinoutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PinoutSet &rArr; GPIOPinTypeEthernetLED &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>

<P><STRONG><a name="[c]"></a>ReadWlanInterruptPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.ReadWlanInterruptPin))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc3000_ssid_scan.o(i.initDriver)
</UL>
<P><STRONG><a name="[2c]"></a>SSIBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(i.SSIBusy))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteDataSynchronous
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTriggerRxProcessing
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFirstWrite
</UL>

<P><STRONG><a name="[2d]"></a>SSIDMADisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIDMADisable))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIntHandler
</UL>

<P><STRONG><a name="[32]"></a>SSIIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssi.o(i.SSIIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadData
</UL>

<P><STRONG><a name="[30]"></a>STREAM_TO_UINT16_f</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cc3000lib.o(i.STREAM_TO_UINT16_f))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsol_event_handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_handler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadDataCont
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIntHandler
</UL>

<P><STRONG><a name="[44]"></a>STREAM_TO_UINT32_f</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cc3000lib.o(i.STREAM_TO_UINT32_f))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsol_event_handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_handler
</UL>

<P><STRONG><a name="[26]"></a>SimpleLinkWaitEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cc3000lib.o(i.SimpleLinkWaitEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SimpleLinkWaitEvent &rArr; hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_start
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_event_mask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_statusget
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_set_scan_params
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_get_scan_results
</UL>

<P><STRONG><a name="[21]"></a>SpiCleanGPIOISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cc3000lib.o(i.SpiCleanGPIOISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiCleanGPIOISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSpiGPIOHandler
</UL>

<P><STRONG><a name="[61]"></a>SpiClose</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cc3000lib.o(i.SpiClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiClose
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_stop
</UL>

<P><STRONG><a name="[56]"></a>SpiConfigureHwMapping</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cc3000lib.o(i.SpiConfigureHwMapping))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[2a]"></a>SpiFirstWrite</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, cc3000lib.o(i.SpiFirstWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteDataSynchronous
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>

<P><STRONG><a name="[6]"></a>SpiIntHandler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, cc3000lib.o(i.SpiIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SpiIntHandler &rArr; SpiReadDataCont &rArr; SpiReadData &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteAsync
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadData
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDMADisable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTriggerRxProcessing
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadDataCont
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STREAM_TO_UINT16_f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SpiOpen</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cc3000lib.o(i.SpiOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_start
</UL>

<P><STRONG><a name="[2e]"></a>SpiReadDataCont</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, cc3000lib.o(i.SpiReadDataCont))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SpiReadDataCont &rArr; SpiReadData &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadData
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STREAM_TO_UINT16_f
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIntHandler
</UL>

<P><STRONG><a name="[11]"></a>SpiReceiveHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cc3000lib.o(i.SpiReceiveHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SpiReceiveHandler &rArr; hci_unsolicited_event_handler &rArr; hci_unsol_event_handler &rArr; set_socket_active_status
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsolicited_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc3000lib.o(i.wlan_start)
</UL>
<P><STRONG><a name="[46]"></a>SpiResumeSpi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cc3000lib.o(i.SpiResumeSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiResumeSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsolicited_event_handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_handler
</UL>

<P><STRONG><a name="[2f]"></a>SpiTriggerRxProcessing</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cc3000lib.o(i.SpiTriggerRxProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SpiTriggerRxProcessing
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIntHandler
</UL>

<P><STRONG><a name="[35]"></a>SpiWrite</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, cc3000lib.o(i.SpiWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFirstWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_patch_send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_command_send
</UL>

<P><STRONG><a name="[4d]"></a>SysCtlClockFreqSet</STRONG> (Thumb, 672 bytes, Stack size 28 bytes, sysctl.o(i.SysCtlClockFreqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysCtlClockFreqSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>

<P><STRONG><a name="[55]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDs
</UL>

<P><STRONG><a name="[20]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysTick
</UL>

<P><STRONG><a name="[4]"></a>SysTickHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysTickHandler &rArr; hci_unsolicited_event_handler &rArr; hci_unsol_event_handler &rArr; set_socket_active_status
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsolicited_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysTick
</UL>

<P><STRONG><a name="[1e]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysTick
</UL>

<P><STRONG><a name="[3a]"></a>UARTFlushRx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uartstdio.o(i.UARTFlushRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTFlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[36]"></a>UARTFlushTx</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uartstdio.o(i.UARTFlushTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTFlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[39]"></a>UARTStdioConfig</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTStdioConfig &rArr; UARTFlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>

<P><STRONG><a name="[5]"></a>UARTStdioIntHandler</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, uartstdio.o(i.UARTStdioIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTStdioIntHandler &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UARTprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, uartstdio.o(i.UARTprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>

<P><STRONG><a name="[3e]"></a>UARTvprintf</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, uartstdio.o(i.UARTvprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>

<P><STRONG><a name="[3b]"></a>UARTwrite</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, uartstdio.o(i.UARTwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[43]"></a>UINT16_TO_STREAM_f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cc3000lib.o(i.UINT16_TO_STREAM_f))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_patch_send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_command_send
</UL>

<P><STRONG><a name="[48]"></a>UINT32_TO_STREAM_f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cc3000lib.o(i.UINT32_TO_STREAM_f))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_event_mask
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_set_scan_params
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_get_scan_results
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_handler
</UL>

<P><STRONG><a name="[a]"></a>WlanInterruptDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.WlanInterruptDisable))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc3000_ssid_scan.o(i.initDriver)
</UL>
<P><STRONG><a name="[b]"></a>WlanInterruptEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.WlanInterruptEnable))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc3000_ssid_scan.o(i.initDriver)
</UL>
<P><STRONG><a name="[9]"></a>WriteWlanPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board.o(i.WriteWlanPin))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc3000_ssid_scan.o(i.initDriver)
</UL>
<P><STRONG><a name="[70]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[71]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[72]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[42]"></a>hci_command_send</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cc3000lib.o(i.hci_command_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_command_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UINT16_TO_STREAM_f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_start
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_event_mask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_statusget
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_set_scan_params
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_get_scan_results
</UL>

<P><STRONG><a name="[27]"></a>hci_event_handler</STRONG> (Thumb, 782 bytes, Stack size 48 bytes, cc3000lib.o(i.hci_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_socket_active_status
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsol_handle_patch_request
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsol_event_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UINT32_TO_STREAM_f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResumeSpi
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STREAM_TO_UINT32_f
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STREAM_TO_UINT16_f
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWaitEvent
</UL>

<P><STRONG><a name="[4b]"></a>hci_patch_send</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, cc3000lib.o(i.hci_patch_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UINT16_TO_STREAM_f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsol_handle_patch_request
</UL>

<P><STRONG><a name="[47]"></a>hci_unsol_event_handler</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, cc3000lib.o(i.hci_unsol_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hci_unsol_event_handler &rArr; set_socket_active_status
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_socket_active_status
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STREAM_TO_UINT32_f
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STREAM_TO_UINT16_f
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsolicited_event_handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_handler
</UL>

<P><STRONG><a name="[4a]"></a>hci_unsol_handle_patch_request</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cc3000lib.o(i.hci_unsol_handle_patch_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_patch_send
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_handler
</UL>

<P><STRONG><a name="[34]"></a>hci_unsolicited_event_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cc3000lib.o(i.hci_unsolicited_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hci_unsolicited_event_handler &rArr; hci_unsol_event_handler &rArr; set_socket_active_status
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsol_event_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResumeSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReceiveHandler
</UL>

<P><STRONG><a name="[4c]"></a>initClk</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.initClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = initClk &rArr; SysCtlClockFreqSet
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
</UL>

<P><STRONG><a name="[4e]"></a>initDriver</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cc3000_ssid_scan.o(i.initDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = initDriver &rArr; wlan_start &rArr; SimpleLinkWaitEvent &rArr; hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_start
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_event_mask
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>initLEDs</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, board.o(i.initLEDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initLEDs &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
</UL>

<P><STRONG><a name="[50]"></a>init_spi</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cc3000lib.o(i.init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_spi &rArr; SpiConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiConfigure
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiConfigureHwMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>

<P><STRONG><a name="[8]"></a>main</STRONG> (Thumb, 272 bytes, Stack size 128 bytes, cc3000_ssid_scan.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; wlan_ioctl_set_scan_params &rArr; SimpleLinkWaitEvent &rArr; hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_statusget
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_set_scan_params
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ioctl_get_scan_results
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4f]"></a>pio_init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, board.o(i.pio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pio_init &rArr; initLEDs &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiCleanGPIOISR
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPULazyStackingEnable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDs
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>

<P><STRONG><a name="[d]"></a>sendBootLoaderPatch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cc3000_ssid_scan.o(i.sendBootLoaderPatch))
<BR>[Address Reference Count : 1]<UL><LI> cc3000_ssid_scan.o(i.initDriver)
</UL>
<P><STRONG><a name="[e]"></a>sendDriverPatch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cc3000_ssid_scan.o(i.sendDriverPatch))
<BR>[Address Reference Count : 1]<UL><LI> cc3000_ssid_scan.o(i.initDriver)
</UL>
<P><STRONG><a name="[f]"></a>sendWLFWPatch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cc3000_ssid_scan.o(i.sendWLFWPatch))
<BR>[Address Reference Count : 1]<UL><LI> cc3000_ssid_scan.o(i.initDriver)
</UL>
<P><STRONG><a name="[49]"></a>set_socket_active_status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cc3000lib.o(i.set_socket_active_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_socket_active_status
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unsol_event_handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_handler
</UL>

<P><STRONG><a name="[51]"></a>wlan_init</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, cc3000lib.o(i.wlan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>

<P><STRONG><a name="[59]"></a>wlan_ioctl_get_scan_results</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cc3000lib.o(i.wlan_ioctl_get_scan_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_ioctl_get_scan_results &rArr; SimpleLinkWaitEvent &rArr; hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_command_send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UINT32_TO_STREAM_f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWaitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>wlan_ioctl_set_scan_params</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, cc3000lib.o(i.wlan_ioctl_set_scan_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wlan_ioctl_set_scan_params &rArr; SimpleLinkWaitEvent &rArr; hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_command_send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UINT32_TO_STREAM_f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWaitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>wlan_ioctl_statusget</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cc3000lib.o(i.wlan_ioctl_statusget))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_ioctl_statusget &rArr; SimpleLinkWaitEvent &rArr; hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_command_send
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWaitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>wlan_set_event_mask</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cc3000lib.o(i.wlan_set_event_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_set_event_mask &rArr; SimpleLinkWaitEvent &rArr; hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_command_send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UINT32_TO_STREAM_f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWaitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>

<P><STRONG><a name="[52]"></a>wlan_start</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cc3000lib.o(i.wlan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_start &rArr; SimpleLinkWaitEvent &rArr; hci_event_handler &rArr; hci_unsol_handle_patch_request &rArr; hci_patch_send &rArr; SpiWrite &rArr; SpiFirstWrite &rArr; SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_command_send
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiOpen
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWaitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDriver
</UL>

<P><STRONG><a name="[5a]"></a>wlan_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cc3000lib.o(i.wlan_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_stop &rArr; SpiClose
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiClose
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[28]"></a>SpiConfigure</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, cc3000lib.o(i.SpiConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SpiConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[31]"></a>SpiDisableSSIDMAChannels</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cc3000lib.o(i.SpiDisableSSIDMAChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiDisableSSIDMAChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteDataSynchronous
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteAsync
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadData
</UL>

<P><STRONG><a name="[33]"></a>SpiEnableSSIDMAChannels</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cc3000lib.o(i.SpiEnableSSIDMAChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiEnableSSIDMAChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteAsync
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadData
</UL>

<P><STRONG><a name="[23]"></a>SpiReadData</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, cc3000lib.o(i.SpiReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SpiReadData &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiEnableSSIDMAChannels
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDisableSSIDMAChannels
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadDataCont
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSpiGPIOHandler
</UL>

<P><STRONG><a name="[22]"></a>SpiWriteAsync</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cc3000lib.o(i.SpiWriteAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiEnableSSIDMAChannels
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDisableSSIDMAChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteDataSynchronous
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiIntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSpiGPIOHandler
</UL>

<P><STRONG><a name="[2b]"></a>SpiWriteDataSynchronous</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cc3000lib.o(i.SpiWriteDataSynchronous))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SpiWriteDataSynchronous &rArr; SpiWriteAsync &rArr; SpiEnableSSIDMAChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteAsync
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDisableSSIDMAChannels
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFirstWrite
</UL>

<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IsBufferEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uartstdio.o(i.IsBufferEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[3c]"></a>IsBufferFull</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uartstdio.o(i.IsBufferFull))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[38]"></a>UARTPrimeTransmit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uartstdio.o(i.UARTPrimeTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
