#:kivy 1.0
#:import kivy kivy
#:import win kivy.core.window

#:kivy 1.8.0
#
# To load this file, Kivy looks if there is a Kv ﬁle with
# the same name as your App class in lowercase, minus
# "App" if it ends with "App". E.g: KivyRobot -> kivy.kv

<ControlClass, FloatLayout>:
    cols: 4
    row: 4
    canvas.before:
        Rectangle:
            # background image
            source: 'Bionix-Robot.jpg'
            pos: self.pos
            size: self.size

    # button to connect client to server
    Button:
        id: connect_client
        text: 'press to connect'
        # play with the size, or change this to a menu instead
        size_hint: 0.2, 0.1
        pos_hint: {'center_x':.1, 'center_y': .95}
        on_press: root.schedule_client()  #bind button to function"
    # button to disconnect client to server
    Button:
        id: disconnect_client
        text: 'press to disconnection'
        # play with the size, or change this to a menu instead
        size_hint: 0.2, 0.1
        pos_hint: {'center_x':.1, 'center_y': .84}
        on_press: root.unschedule_client()  #bind button to function"

    # button to select between manual and autonomous
    Button:
        id: autonomous_mode
        text: 'autonomous mode'
        # play with the size, or change this to a menu instead
        size_hint: 0.2, 0.1
        pos_hint: {'center_x':.1, 'center_y': .70}
        on_press: root.schedule_automation()  #bind button to function"

    # move forward button
    Button:
        id: drive_forward
        text: 'move forward'
        size_hint: 0.15, 0.1
        pos_hint: {'center_x':.5, 'center_y': .95}
        on_press: root.schedule_move_forward()
        on_release: root.schedule_stop_track()

    # move backwards button
    Button:
        id: drive_backward
        text: 'move backward'
        size_hint: 0.15, 0.1
        pos_hint: {'center_x':.5, 'center_y': 0.70}
        on_press: root.schedule_move_backward()
        on_release: root.schedule_stop_track()

    # turn left button
    Button:
        id: turn_left
        text: 'left'
        size_hint: 0.07, 0.15
        pos_hint: {'center_x':.38, 'center_y': 0.825}
        on_press: root.schedule_turn_left()
        on_release: root.schedule_stop_track()

    # turn right button
    Button:
        id: turn_right
        text: 'right'
        size_hint: 0.07, 0.15
        pos_hint: {'center_x':.62, 'center_y': 0.825}
        on_press: root.schedule_turn_right()
        on_release: root.schedule_stop_track()

    # turn left forward
    Button:
        id: left_forward
        text: 'left F'
        size_hint: 0.07, 0.08
        pos_hint: {'center_x':.38, 'center_y': 0.95}
        on_press: root.schedule_left_forward()
        on_release: root.schedule_stop_track()

    # turn right forward
    Button:
        id: right_forward
        text: 'right F'
        size_hint: 0.07, 0.08
        pos_hint: {'center_x':.62, 'center_y': 0.95}
        on_press: root.schedule_right_forward()
        on_release: root.schedule_stop_track()

    # turn left backward
    Button:
        id: left_backward
        text: 'left B'
        size_hint: 0.07, 0.08
        pos_hint: {'center_x':.38, 'center_y': 0.7}
        on_press: root.schedule_left_backward()
        on_release: root.schedule_stop_track()

    # turn right backward
    Button:
        id: right_backward
        text: 'right B'
        size_hint: 0.07, 0.08
        pos_hint: {'center_x':.62, 'center_y': 0.7}
        on_press: root.schedule_right_backward()
        on_release: root.schedule_stop_track()

    # velocity slider
    Slider:
        id: velocity_slider
        value: 0
        size_hint: 0.35, 0.2
        pos_hint: {'center_x':.5, 'center_y': 0.5}
        range: (0, 2)
        step: 1
        on_value:
            # args here refers to the arguments passed to the event
            root.velocity_slider_value(*args)
    Label:
        id: velocity_slider_label
        size_hint: 0.35, 0.2
        pos_hint: {'center_x':.5, 'center_y': 0.55}
        # display value of slider on the label
        text: 'Velocity of Car: ' + str(int(velocity_slider.value))
    
        
        
